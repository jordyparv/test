 describe("editSwitchDetails", () => {
    it("should return error if switch_unid is missing", async () => {
      const req = { params: {} } as any;
      const res = mockResponse();
      await service.editSwitchDetails(req, res);
      expect(res.status).toHaveBeenCalledWith(400);
      expect(res.json).toHaveBeenCalledWith({
        statusCode: 400,
        message: "please provide the switch unid!",
      });
    });

    it("should return error if switch_unid is invalid", async () => {
      switchRepoMock.checkSwitchUnidInTable.mockResolvedValue(null);
      const req = { params: { switch_unid: "invalid_id" } } as any;
      const res = mockResponse();
      await service.editSwitchDetails(req, res);
      expect(res.status).toHaveBeenCalledWith(400);
      expect(res.json).toHaveBeenCalledWith({
        statusCode: 400,
        message: "switch unid is not valid or exist!",
      });
    });

    // Add more tests for the remaining scenarios...

  });

  describe("getSwitchDetailForTypeAhead", () => {
    it("should return error if no query parameters are provided", async () => {
      const req = { query: {} } as any;
      const res = mockResponse();
      await service.getSwitchDetailForTypeAhead(req, res);
      expect(res.status).toHaveBeenCalledWith(400);
      expect(res.json).toHaveBeenCalledWith({
        statusCode: 400,
        message: "please provide filter",
      });
    });

    it("should return data if main_switch_name is provided", async () => {
      switchRepoMock.getSwitchDetailForTypeAhead.mockResolvedValue([{ id: 1 }]);
      const req = { query: { main_switch_name: "valid_name" } } as any;
      const res = mockResponse();
      await service.getSwitchDetailForTypeAhead(req, res);
      expect(res.status).toHaveBeenCalledWith(200);
      expect(res.json).toHaveBeenCalledWith({
        statusCode: 200,
        message: "data fetched successfully!",
        data: [{ id: 1 }],
      });
    });
