async getSwitchDirective() {
  const rawData = await this.DirectiveGroupEntityRepository.createQueryBuilder('gr')
    .select([
      `gr.GROUP_NAME AS "group_name"`,
      `gr.GROUP_ID AS "group_id"`,
      `sc.LASTNAME || ', ' || sc.FIRSTNAME AS "assigned_to"`,
      `sele.ELEMENT_DIVISION AS "element_division"`,
      `sele.ELEMENT_DEPT AS "element_dept"`,
      `sele.ELEMENT_ID AS "element_id"`  // Add ELEMENT_ID so we can gather it into the elements array
    ])
    .innerJoin(
      DirectiveUserGroupMappingEntity,
      'ugm',
      'ugm.GROUP_ID = gr.GROUP_ID',
    )
    .innerJoin(
      DirectiveElementGroupMappingEntity,
      'egm',
      'egm.GROUP_ID = gr.GROUP_ID',
    )
    .innerJoin(
      SwitchElementEntity,
      'sele',
      'sele.ELEMENT_ID = egm.ELEMENT_ID',
    )
    .innerJoin(SecContactEntity, 'sc', 'sc.LOGIN_ID = ugm.USER_ID')
    .getRawMany();

  // Step 2: Transform the raw data into the desired structure
  const groupedData = rawData.reduce((acc, row) => {
    const { group_name, group_id, assigned_to, element_id, element_division, element_dept } = row;

    // Check if the group already exists in the accumulator
    let group = acc.find(g => g.group_id === group_id);
    if (!group) {
      group = {
        group_name,
        group_id,
        assigned_to,
        elements: []  // Initialize the elements array
      };
      acc.push(group);
    }

    // Add the element information to the group's elements array
    group.elements.push({
      element_id,
      element_division,
      element_dept
    });

    return acc;
  }, []);

  return groupedData;
}
