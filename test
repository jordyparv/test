import { Test, TestingModule } from '@nestjs/testing';
import { SwitchController } from './switch.controller'; // Adjust the import path
import { SwitchService } from './switch.service'; // Adjust the import path
import { HttpStatus } from '@nestjs/common';
import { Request, Response } from 'express';
import { ApiResponseObject } from './api-response-object'; // Adjust the import path

describe('SwitchController', () => {
    let controller: SwitchController;
    let service: SwitchService;

    const mockRequest = (params = {}, body = {}, query = {}) => ({
        params,
        body,
        query,
    } as Request);

    const mockResponse = () => {
        const res: Partial<Response> = {};
        res.status = jest.fn().mockReturnValue(res);
        res.json = jest.fn().mockReturnValue(res);
        return res as Response;
    };

    beforeEach(async () => {
        const module: TestingModule = await Test.createTestingModule({
            controllers: [SwitchController],
            providers: [
                {
                    provide: SwitchService,
                    useValue: {
                        checkSwitchUnidInTable: jest.fn(),
                        updateSwitchDetails: jest.fn(),
                        getIopdetails: jest.fn(),
                        getSwitchDetailForTypeAhead: jest.fn(),
                        getSwitchPmControl: jest.fn(),
                        updateSwitchPmControl: jest.fn(),
                    },
                },
            ],
        }).compile();

        controller = module.get<SwitchController>(SwitchController);
        service = module.get<SwitchService>(SwitchService);
    });

    describe('editSwitchDetails', () => {
        it('should return 404 if switch unid does not exist', async () => {
            const req = mockRequest({ switchUnid: 'non-existent' }, { name: 'Test Switch' });
            const res = mockResponse();

            jest.spyOn(service, 'checkSwitchUnidInTable').mockResolvedValueOnce(null);

            await controller.editSwitchDetails(req, res);

            expect(res.status).toHaveBeenCalledWith(HttpStatus.NOT_FOUND);
            expect(res.json).toHaveBeenCalledWith(ApiResponseObject(HttpStatus.NOT_FOUND, "Switch unid is not exist!"));
        });

        it('should return 400 if no payload in the request body', async () => {
            const req = mockRequest({ switchUnid: '123' }, {}, {});
            const res = mockResponse();

            jest.spyOn(service, 'checkSwitchUnidInTable').mockResolvedValueOnce({});

            await controller.editSwitchDetails(req, res);

            expect(res.status).toHaveBeenCalledWith(HttpStatus.BAD_REQUEST);
            expect(res.json).toHaveBeenCalledWith(ApiResponseObject(HttpStatus.BAD_REQUEST, "Payload not found in the request body!"));
        });

        it('should return 200 and updated switch details', async () => {
            const req = mockRequest({ switchUnid: '123' }, { name: 'Updated Switch' });
            const res = mockResponse();

            jest.spyOn(service, 'checkSwitchUnidInTable').mockResolvedValueOnce({});
            jest.spyOn(service, 'updateSwitchDetails').mockResolvedValueOnce({ rowsAffected: 1 });
            jest.spyOn(service, 'getIopdetails').mockResolvedValueOnce({ name: 'Updated Switch' });

            await controller.editSwitchDetails(req, res);

            expect(res.status).toHaveBeenCalledWith(HttpStatus.OK);
            expect(res.json).toHaveBeenCalledWith({
                statusCode: HttpStatus.OK,
                message: "Switch details updated!",
                data: { name: 'Updated Switch' },
            });
        });
    });

    describe('getSwitchDetailForTypeAhead', () => {
        it('should return 400 if no filters provided', async () => {
            const req = mockRequest({}, {}, {});
            const res = mockResponse();

            await controller.getSwitchDetailForTypeAhead(req, res);

            expect(res.status).toHaveBeenCalledWith(HttpStatus.BAD_REQUEST);
            expect(res.json).toHaveBeenCalledWith(ApiResponseObject(HttpStatus.BAD_REQUEST, "Please provide the filters."));
        });

        it('should return 200 and data if found', async () => {
            const req = mockRequest({}, {}, { main_switch_name: 'Main Switch' });
            const res = mockResponse();

            const mockData = [{ id: 1, name: 'Main Switch' }];
            jest.spyOn(service, 'getSwitchDetailForTypeAhead').mockResolvedValueOnce(mockData);

            await controller.getSwitchDetailForTypeAhead(req, res);

            expect(res.status).toHaveBeenCalledWith(HttpStatus.OK);
            expect(res.json).toHaveBeenCalledWith(ApiResponseObject(HttpStatus.OK, "Data fetched successfully!", mockData));
        });
    });

    describe('getSwitchPmControl', () => {
        it('should return 400 if switch unid is empty', async () => {
            const req = mockRequest({ switchUnid: '' });
            const res = mockResponse();

            await controller.getSwitchPmControl(req, res);

            expect(res.status).toHaveBeenCalledWith(HttpStatus.BAD_REQUEST);
            expect(res.json).toHaveBeenCalledWith(ApiResponseObject(HttpStatus.BAD_REQUEST, "Please provide switch unid!"));
        });

        it('should return 404 if switch unid does not exist', async () => {
            const req = mockRequest({ switchUnid: 'non-existent' });
            const res = mockResponse();

            jest.spyOn(service, 'checkSwitchUnidInTable').mockResolvedValueOnce(null);

            await controller.getSwitchPmControl(req, res);

            expect(res.status).toHaveBeenCalledWith(HttpStatus.NOT_FOUND);
            expect(res.json).toHaveBeenCalledWith(ApiResponseObject(HttpStatus.NOT_FOUND, "Switch unid is not exist!"));
        });

        it('should return 200 and switch pm control data', async () => {
            const req = mockRequest({ switchUnid: '123' });
            const res = mockResponse();

            const mockControlData = { someControl: 'true' };
            jest.spyOn(service, 'checkSwitchUnidInTable').mockResolvedValueOnce({});
            jest.spyOn(service, 'getSwitchPmControl').mockResolvedValueOnce([mockControlData]);

            await controller.getSwitchPmControl(req, res);

            expect(res.status).toHaveBeenCalledWith(HttpStatus.OK);
            expect(res.json).toHaveBeenCalledWith(ApiResponseObject(HttpStatus.OK, 'Switch pm control fetched successfully!', {
                someControl: true
            }));
        });
    });

    describe('updateSwitchPmControl', () => {
        it('should return 400 if switch unid is empty', async () => {
            const req = mockRequest({ switchUnid: '' }, { someControl: true });
            const res = mockResponse();

            await controller.updateSwitchPmControl(req, res);

            expect(res.status).toHaveBeenCalledWith(HttpStatus.BAD_REQUEST);
            expect(res.json).toHaveBeenCalledWith(ApiResponseObject(HttpStatus.BAD_REQUEST, "Please provide switch unid!"));
        });

        it('should return 404 if switch unid does not exist', async () => {
            const req = mockRequest({ switchUnid: 'non-existent' }, { someControl: true });
            const res = mockResponse();

            jest.spyOn(service, 'checkSwitchUnidInTable').mockResolvedValueOnce(null);

            await controller.updateSwitchPmControl(req, res);

            expect(res.status).toHaveBeenCalledWith(HttpStatus.NOT_FOUND);
            expect(res.json).toHaveBeenCalledWith(ApiResponseObject(HttpStatus.NOT_FOUND, "Switch unid is not exist!"));
        });

        it('should return 400 if payload is empty', async () => {
            const req = mockRequest({ switchUnid: '123' }, {});
            const res = mockResponse();

            jest.spyOn(service, 'checkSwitchUnidInTable').mockResolvedValueOnce({});

            await controller.updateSwitchPmControl(req, res);

            expect(res.status).toHaveBeenCalledWith(HttpStatus.BAD_REQUEST);
            expect(res.json).toHaveBeenCalledWith(ApiResponseObject(HttpStatus.BAD_REQUEST, "Payload not found in the request body!"));
        });

        it('should return 200 if switch pm control is updated successfully', async () => {
            const req = mockRequest({ switchUnid: '123' }, { someControl: true });
            const res = mockResponse();

            jest.spyOn(service, 'checkSwitchUnidInTable').mockResolvedValueOnce({});
            jest.spyOn(service, 'updateSwitchPmControl').mockResolvedValueOnce({ rowsAffected: 1 });

            await controller.updateSwitchPmControl(req, res);

            expect(res.status).toHaveBeenCalledWith(HttpStatus.OK);
            expect(res.json).toHaveBeenCalledWith(ApiResponseObject(HttpStatus.INTERNAL_SERVER_ERROR, 'Switch pm control update successfully!', expect.any(Object)));
        });
    });
});
