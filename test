describe('updateSwitchDirective', () => {
  it('should update directive successfully', async () => {
    let updateSwitchDirectiveDto: UpdateSwitchDirectiveDto = {
      group_name: 'test',
      group_id: 12,
      teams: ['test', 'test2'],
      assigned_mgr: 'test',
      elements: [123, 431243, 124],
      updated_by: 'iop',
    };

    const mockQueryBuilder = {
      select: jest.fn().mockReturnThis(),
      from: jest.fn().mockReturnThis(),
      where: jest.fn().mockReturnThis(),
      getOne: jest.fn().mockResolvedValue({ group_name: 'test' }),
      update: jest.fn().mockReturnThis(),
      set: jest.fn().mockReturnThis(),
      execute: jest.fn().mockResolvedValue({}),
      delete: jest.fn().mockReturnThis(),
    };

    mockQueryRunner.manager.createQueryBuilder.mockReturnValue(mockQueryBuilder);

    await service.update(12, updateSwitchDirectiveDto);

    // Assertions
    expect(mockQueryRunner.startTransaction).toHaveBeenCalled();
    expect(mockQueryRunner.commitTransaction).toHaveBeenCalled();
    expect(mockQueryRunner.release).toHaveBeenCalled();
    expect(mockQueryBuilder.update).toHaveBeenCalled();
    expect(mockQueryBuilder.set).toHaveBeenCalled();
    expect(mockQueryBuilder.execute).toHaveBeenCalled();
  });

  it('should handle errors and rollback transaction', async () => {
    const updateSwitchDirectiveDto: UpdateSwitchDirectiveDto = {
      group_name: 'test',
      group_id: 12,
      teams: ['test', 'test2'],
      assigned_mgr: 'test',
      elements: [123, 431243, 124],
      updated_by: 'iop',
    };

    const mockQueryBuilder = {
      select: jest.fn().mockReturnThis(),
      from: jest.fn().mockReturnThis(),
      where: jest.fn().mockReturnThis(),
      getOne: jest.fn().mockResolvedValue(null), // Simulate group not found
      update: jest.fn().mockReturnThis(),
      set: jest.fn().mockReturnThis(),
      execute: jest.fn().mockRejectedValue(new Error('Database error')), // Simulate error
    };

    mockQueryRunner.manager.createQueryBuilder.mockReturnValue(mockQueryBuilder);

    await expect(service.update(12, updateSwitchDirectiveDto)).rejects.toThrow(
      new HttpException({ message: 'Database error' }, HttpStatus.INTERNAL_SERVER_ERROR),
    );

    // Assertions for rollback
    expect(mockQueryRunner.rollbackTransaction).toHaveBeenCalled();
    expect(mockQueryRunner.release).toHaveBeenCalled();
  });
});
\__\
         

      // Assertions
      expect(mockQueryRunner.startTransaction).toHaveBeenCalled();
      expect(mockQueryRunner.rollbackTransaction).toHaveBeenCalled();
      expect(mockQueryRunner.release).toHaveBeenCalled();
    });

    it('should rollback transaction on error', async () => {
      // Mock query error
      mockQueryRunner.manager.createQueryBuilder.mockImplementationOnce(() => {
        throw new Error('Database error');
      });

      const createSwitchDirectiveDto = {
        group_name: 'Test Group',
        created_by: 'test_user',
        assigned_mgr: 'manager_user',
        elements: [1, 2, 3],
        teams: ['team1', 'team2'],
      };

      await expect(service.create(createSwitchDirectiveDto)).rejects.toThrow(
        new HttpException(
          { message: 'Database error' },
          HttpStatus.INTERNAL_SERVER_ERROR,
        ),
      );

      // Assertions
      expect(mockQueryRunner.startTransaction).toHaveBeenCalled();
      expect(mockQueryRunner.rollbackTransaction).toHaveBeenCalled();
      expect(mockQueryRunner.release).toHaveBeenCalled();
    });
  });
  describe('updateSwitchDirective', () => {
    it('it should update directive ', async () => {
      let updateSwitchDirectiveDto: UpdateSwitchDirectiveDto = {
        group_name: 'test',
        group_id: 12,
        teams: ['test', 'test2'],
        assigned_mgr: 'test',
        elements: [123, 431243, 124],
        updated_by: 'iop',
      };

      let mockInsertQueryBuilder = {
        insert: jest.fn().mockReturnThis(),
        into: jest.fn().mockReturnThis(),
        update: jest.fn().mockReturnThis(),
        set: jest.fn().mockReturnThis(),
        values: jest.fn().mockReturnThis(),
        delete: jest.fn().mockReturnThis(),
        where: jest.fn().mockReturnThis(),
        execute: jest.fn().mockResolvedValue([{}]),
      };

      mockQueryRunner.manager.createQueryBuilder
        .mockReturnValueOnce({
          select: jest.fn().mockReturnThis(),
          from: jest.fn().mockReturnThis(),
          where: jest.fn().mockReturnThis(),
          getOne: jest.fn().mockResolvedValue({ group_name: 'test' }),
        })
        .mockImplementationOnce(() => mockInsertQueryBuilder)
        .mockImplementationOnce(() => mockInsertQueryBuilder)
        .mockImplementationOnce(() => mockInsertQueryBuilder);

      mockQueryRunner.manager.createQueryBuilder
        .mockReturnValueOnce({
          select: jest.fn().mockReturnThis(),
          from: jest.fn().mockReturnThis(),
          where: jest.fn().mockReturnThis(),
          getOne: jest.fn().mockResolvedValue({ group_name: 'test' }),
        })
        .mockImplementationOnce(() => mockInsertQueryBuilder);

      await mockQueryRunner.manager.query
        .mockResolvedValueOnce([{ NEXTVAL: 1 }]) // Group ID sequence
        .mockResolvedValueOnce([{ NEXTVAL: 2 }]) // Mapping ID sequence
        .mockResolvedValue([{ NEXTVAL: 3 }, { NEXTVAL: 5 }, { NEXTVAL: 6 }]); // Element mapping ID sequence

      try {
        const result = await service.update(12, updateSwitchDirectiveDto);
        expect(result).toEqual({
          message: 'Switch directive updated successfully',
          status: HttpStatus.OK,
        });
      } catch (error) {
        expect(error).toEqual(
          new HttpException(
            {
              message: 'Group not found',
              status: HttpStatus.NOT_FOUND,
            },
            HttpStatus.NOT_FOUND,
          ),
        );
      }
    });
    it('it should return group not exist while update', async () => {
      let updateSwitchDirectiveDto = {
        group_name: 'test',
        group_id: 12,
        teams: ['test', 'test2'],
      };
      let mockInsertQueryBuilder = {
        insert: jest.fn().mockReturnThis(),
        into: jest.fn().mockReturnThis(),
        values: jest.fn().mockReturnThis(),
        execute: jest.fn().mockResolvedValue([{}]),
      };

      mockQueryRunner.manager.createQueryBuilder
        .mockReturnValueOnce({
          select: jest.fn().mockReturnThis(),
          from: jest.fn().mockReturnThis(),
          where: jest.fn().mockReturnThis(),
          getOne: jest.fn().mockResolvedValue(null),
        })
        .mockImplementationOnce(() => mockInsertQueryBuilder)
        .mockImplementationOnce(() => mockInsertQueryBuilder)
        .mockImplementationOnce(() => mockInsertQueryBuilder);
      try {
        await service.update(12, updateSwitchDirectiveDto);
      } catch (error) {
        expect(error).toEqual(
          new HttpException(
            {
              message: 'Group not found',
              status: HttpStatus.NOT_FOUND,
            },
            HttpStatus.NOT_FOUND,
          ),
        );
      }
    });
  });
});
