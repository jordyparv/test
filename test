import { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';
import { DirectiveGroupEntity } from './DirectiveGroupEntity';
import { SecContactEntity } from './SecContactEntity';

@Entity('DIRECTIVE_USER_GROUP_MAPPING')
export class DirectiveUserGroupMappingEntity {
  @PrimaryGeneratedColumn()
  MAPPING_ID: number;

  @Column()
  GROUP_ID: number;

  @Column()
  USER_ID: string;

  @ManyToOne(() => DirectiveGroupEntity, (group) => group.userGroupMappings)
  group: DirectiveGroupEntity;

  @ManyToOne(() => SecContactEntity, (contact) => contact.userGroupMappings)
  user: SecContactEntity;
}

@Entity('DIRECTIVE_GROUP')
export class DirectiveGroupEntity {
  @PrimaryGeneratedColumn()
  GROUP_ID: number;

  @Column()
  GROUP_NAME: string;

  @OneToMany(() => DirectiveUserGroupMappingEntity, (mapping) => mapping.group)
  userGroupMappings: DirectiveUserGroupMappingEntity[];

  @OneToMany(() => DirectiveElementGroupMappingEntity, (mapping) => mapping.group)
  elementGroupMappings: DirectiveElementGroupMappingEntity[];
}

@Entity('SWITCH_ELEMENTS')
export class SwitchElementEntity {
  @PrimaryGeneratedColumn()
  ELEMENT_ID: number;

  @Column()
  DESCRIPTION: string;

  @Column()
  ELEMENT_DIVISION: string;

  @Column()
  ELEMENT_DEPT: string;

  @OneToMany(() => DirectiveElementGroupMappingEntity, (mapping) => mapping.element)
  elementGroupMappings: DirectiveElementGroupMappingEntity[];
}

@Entity('DIRECTIVE_ELEMENT_GROUP_MAPPING')
export class DirectiveElementGroupMappingEntity {
  @PrimaryGeneratedColumn()
  ELEMENT_MAPPING_ID: number;

  @Column()
  GROUP_ID: number;

  @Column()
  ELEMENT_ID: number;

  @ManyToOne(() => DirectiveGroupEntity, (group) => group.elementGroupMappings)
  group: DirectiveGroupEntity;

  @ManyToOne(() => SwitchElementEntity, (element) => element.elementGroupMappings)
  element: SwitchElementEntity;
}

ntity('SEC_CONTACT')
export class SecContactEntity {
  @PrimaryGeneratedColumn()
  CONTACT_ID: number;

  @Column()
  LOGIN_ID: string;

  @Column()
  FIRSTNAME: string;

  @Column()
  LASTNAME: string;

  @OneToMany(() => DirectiveUserGroupMappingEntity, (mapping) => mapping.user)
  userGroupMappings: DirectiveUserGroupMappingEntity[];
}

const directiveGroupRepository = getRepository(DirectiveGroupEntity);




const results = await directiveGroupRepository
  .createQueryBuilder('gr')
  .leftJoinAndSelect('gr.elementGroupMappings', 'egm')
  .leftJoinAndSelect('egm.element', 'sele')
  .leftJoinAndSelect('gr.userGroupMappings', 'ugm')
  .leftJoinAndSelect('ugm.user', 'sc')
  .select([
    'gr.GROUP_NAME',
    'sele.ELEMENT_DIVISION',
    'sele.ELEMENT_DEPT',
    "CONCAT(sc.LASTNAME, ', ', sc.FIRSTNAME) AS Assigned_To"
  ])
  .groupBy('gr.GROUP_NAME')
  .addGroupBy('sele.ELEMENT_DIVISION')
  .addGroupBy('sele.ELEMENT_DEPT')
  .addGroupBy('sc.LASTNAME, sc.FIRSTNAME')
  .getRawMany();

console.log(results);
