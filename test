import { Test, TestingModule } from '@nestjs/testing';
import { HttpException, HttpStatus } from '@nestjs/common';
import { UserService } from './user.service';
import { Repository } from 'typeorm';
import { DirectiveGroupEntity } from './entities/directive-group.entity';
import { getRepositoryToken } from '@nestjs/typeorm';

describe('UserService - create()', () => {
  let service: UserService;
  let mockQueryRunner: any;
  let directiveGroupRepository: jest.Mocked<Repository<DirectiveGroupEntity>>;

  beforeEach(async () => {
    // Mock queryRunner
    mockQueryRunner = {
      manager: {
        createQueryBuilder: jest.fn(),
        query: jest.fn(),
      },
      startTransaction: jest.fn(),
      commitTransaction: jest.fn(),
      rollbackTransaction: jest.fn(),
      release: jest.fn(),
    };

    // Mock Repository
    directiveGroupRepository = {
      manager: { connection: { createQueryRunner: jest.fn(() => mockQueryRunner) } },
    } as unknown as jest.Mocked<Repository<DirectiveGroupEntity>>;

    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UserService,
        { provide: getRepositoryToken(DirectiveGroupEntity), useValue: directiveGroupRepository },
      ],
    }).compile();

    service = module.get<UserService>(UserService);
  });

  it('should save a new switch directive successfully', async () => {
    // Mock methods
    mockQueryRunner.manager.createQueryBuilder.mockReturnValueOnce({
      select: jest.fn().mockReturnThis(),
      from: jest.fn().mockReturnThis(),
      where: jest.fn().mockReturnThis(),
      getOne: jest.fn().mockResolvedValue(null),
    });

    mockQueryRunner.manager.query
      .mockResolvedValueOnce([{ NEXTVAL: 1 }]) // Group ID sequence
      .mockResolvedValueOnce([{ NEXTVAL: 2 }]) // Mapping ID sequence
      .mockResolvedValueOnce([{ NEXTVAL: 3 }]); // Element mapping ID sequence

    mockQueryRunner.manager.createQueryBuilder.mockReturnValueOnce({
      insert: jest.fn().mockReturnThis(),
      into: jest.fn().mockReturnThis(),
      values: jest.fn().mockReturnThis(),
      execute: jest.fn().mockResolvedValue({}),
    });

    const createSwitchDirectiveDto = {
      group_name: 'Test Group',
      created_by: 'test_user',
      assigned_mgr: 'manager_user',
      elements: [1, 2, 3],
      teams: ['team1', 'team2'],
    };

    const result = await service.create(createSwitchDirectiveDto);

    // Assertions
    expect(mockQueryRunner.startTransaction).toHaveBeenCalled();
    expect(mockQueryRunner.commitTransaction).toHaveBeenCalled();
    expect(mockQueryRunner.release).toHaveBeenCalled();
    expect(result).toEqual({
      message: 'Switch directive saved successfully',
      status: HttpStatus.CREATED,
    });
  });

  it('should throw an error if group name already exists', async () => {
    // Mock existing group
    mockQueryRunner.manager.createQueryBuilder.mockReturnValueOnce({
      select: jest.fn().mockReturnThis(),
      from: jest.fn().mockReturnThis(),
      where: jest.fn().mockReturnThis(),
      getOne: jest.fn().mockResolvedValue({ GROUP_ID: 1 }),
    });

    const createSwitchDirectiveDto = {
      group_name: 'Existing Group',
      created_by: 'test_user',
      assigned_mgr: 'manager_user',
      elements: [1, 2, 3],
      teams: ['team1', 'team2'],
    };

    await expect(service.create(createSwitchDirectiveDto)).rejects.toThrow(
      new HttpException(
        {
          message: 'Group name already exists',
          status: HttpStatus.BAD_REQUEST,
        },
        HttpStatus.BAD_REQUEST,
      ),
    );

    // Assertions
    expect(mockQueryRunner.startTransaction).toHaveBeenCalled();
    expect(mockQueryRunner.rollbackTransaction).toHaveBeenCalled();
    expect(mockQueryRunner.release).toHaveBeenCalled();
  });

  it('should rollback transaction on error', async () => {
    // Mock query error
    mockQueryRunner.manager.createQueryBuilder.mockImplementationOnce(() => {
      throw new Error('Database error');
    });

    const createSwitchDirectiveDto = {
      group_name: 'Test Group',
      created_by: 'test_user',
      assigned_mgr: 'manager_user',
      elements: [1, 2, 3],
      teams: ['team1', 'team2'],
    };

    await expect(service.create(createSwitchDirectiveDto)).rejects.toThrow(
      new HttpException(
        { message: 'Database error' },
        HttpStatus.INTERNAL_SERVER_ERROR,
      ),
    );

    // Assertions
    expect(mockQueryRunner.startTransaction).toHaveBeenCalled();
    expect(mockQueryRunner.rollbackTransaction).toHaveBeenCalled();
    expect(mockQueryRunner.release).toHaveBeenCalled();
  });
});
