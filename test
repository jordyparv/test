        return res.status(HttpStatus.BAD_REQUEST).json({
          statusCode: HttpStatus.BAD_REQUEST,
          message: "switch unid is not valid or exist!",
        });
      }
    const queryParams = req.body;
    let payload = {SWITCH_UNID:switch_unid}
    Iif(Object.values(queryParams).length===0){
      return res.status(HttpStatus.BAD_REQUEST).json({
        statusCode: HttpStatus.BAD_REQUEST,
        message: "No data found to be update!",
      });
    }
    for(let key in constants.validEditableSwitchDetailsColumns){
      Iif(!CommonUtil.isEmpty(queryParams[key])){
        payload[constants.validEditableSwitchDetailsColumns[key]] = CommonUtil.sanitizeString(queryParams[key])
      }
    }
      
 /*   @ updateTable: (
      tableName: string,
      updateValues: { [key: string]: any },
      keyColumns: string[]
    )
*/
    const data = await this.switchRepo.updateSwitchDetails(payload)
 
    Iif(data.rowsAffected!=1){
      return res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({
        statusCode: HttpStatus.INTERNAL_SERVER_ERROR,
        message: "something went wrong! try again later.",
      });
    }
    switchData = await  this.switchRepo?.getIopdetails(switch_unid);
    return res.status(HttpStatus.OK).json({
