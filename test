  async getSwitchPmControl(req:Request,res:Response){
    try {
      
      const {switchUnid} = req.params
       let switchData = null

      switchData = await this.switchRepo.checkSwitchUnidInTable(CommonUtil.sanitizeString(switchUnid))
      if(CommonUtil.isEmpty(switchData)){
        return res.status(HttpStatus.NOT_FOUND)
        .json(ApiResponseObject(
          HttpStatus.NOT_FOUND,
          "Switch unid is not exist!",
        ));
      }
     [switchData] = await this.switchRepo.getSwitchPmControl(switchUnid);
    
     let response = {'switch_unid':switchUnid}

     for(let key in switchData){
      if(switchData[key]?.toLowerCase() === 'true'){
        response[key?.toLowerCase()] = true
      }
      else if(switchData[key]?.toLowerCase() === 'false'){
        response[key?.toLowerCase()] = false
      }
      else{
        response[key?.toLowerCase()] = null
      }
     }
     
     return res.status(HttpStatus.OK)
     .json(ApiResponseObject(
       HttpStatus.OK,
      'Switch pm control fetched successfully!',
       [response],
     ));

    } catch (error) {
      this.logger.error(error.message);
      return res.status(HttpStatus.INTERNAL_SERVER_ERROR)
      .json(ApiResponseObject(
         HttpStatus.INTERNAL_SERVER_ERROR,
        "Something went wrong! try again later.",
        {error:error.message}
      ));
    }
  }

async getSwitchPmControl(switchUnid:string){
    try {

      const query = queries.getSwitchPmControl
      const qParams = [switchUnid]
      const data:any = await this.connection.executeQuery(query,qParams)
      return data.rows;
    } catch (error) {
      logger.error(error.message)
      throw error
    }
  }



 it('should return switch PM control data successfully', async () => {
    const req = mockRequest({ switchUnid: 'BEF73A56736EF1D1AE5C43F1B83D6790' });
    const res = mockResponse();
    switchRepoMock.checkSwitchUnidInTable.mockResolvedValue([{ switchUnid: 'BEF73A56736EF1D1AE5C43F1B83D6790' }]);
    switchRepoMock.getSwitchPmControl.mockResolvedValue([{
      "switch_unid": "BEF73A56736EF1D1AE5C43F1B83D6790",
      "aws_mec": true,
      "mec_google": false,
      "mec_microsoft": false,
      "physical_location_pms": false,
      "switch_no_pm": true,
      "sites_no_pm": false
  }]);

    await service.getSwitchPmControl(req, res);

    expect(res.status).toHaveBeenCalledWith(HttpStatus.INTERNAL_SERVER_ERROR);
    expect(res.json).toHaveBeenCalledWith(ApiResponseObject(
      HttpStatus.OK,
      'Switch pm control fetched successfully!',
      [{
        "switch_unid": "BEF73A56736EF1D1AE5C43F1B83D6790",
        "aws_mec": true,
        "mec_google": false,
        "mec_microsoft": false,
        "physical_location_pms": false,
        "switch_no_pm": true,
        "sites_no_pm": false
    }]
    ));
  });
error SwitchService › getSwitchPmControl › should return switch PM control data successfully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    -   "data": Array [
    -     Object {
    -       "aws_mec": true,
    -       "mec_google": false,
    -       "mec_microsoft": false,
    -       "physical_location_pms": false,
    -       "sites_no_pm": false,
    -       "switch_no_pm": true,
    -       "switch_unid": "BEF73A56736EF1D1AE5C43F1B83D6790",
    +   "data": Object {
    +     "error": "_a.toLowerCase is not a function",
        },
    -   ],
    -   "message": "Switch pm control fetched successfully!",
    -   "statusCode": 200,
    +   "message": "Something went wrong! try again later.",
    +   "statusCode": 500,
      },

    Number of calls: 1

      1220 |
      1221 |     expect(res.status).toHaveBeenCalledWith(HttpStatus.INTERNAL_SERVER_ERROR);
    > 1222 |     expect(res.json).toHaveBeenCalledWith(ApiResponseObject(
           |                      ^
      1223 |       HttpStatus.OK,
      1224 |       'Switch pm control fetched successfully!',
      1225 |       [{
