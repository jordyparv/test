queryRunner = {
      startTransaction: jest.fn(),
      commitTransaction: jest.fn(),
      rollbackTransaction: jest.fn(),
      release: jest.fn(),
      manager: {
        createQueryBuilder: jest.fn(),
        query: jest.fn(),
        connection: {
          createQueryRunner: jest.fn().mockReturnValue(queryRunner),
        },
      },

afterEach(() => {
    jest.clearAllMocks();
  });


describe('createSwitchDirective', () => {
    it('should throw an error if the group name already exists', async () => {
      // Simulate that the group name already exists in the database
      directiveGroupRepo.manager.createQueryBuilder().getOne.mockResolvedValue({
        GROUP_ID: 1,
      });

      try {
        await service.create(mockCreateSwitchDirectiveDto);
      } catch (error) {
        expect(error.response.message).toBe('Group name already exists');
        expect(error.status).toBe(HttpStatus.BAD_REQUEST);
      }

      expect(directiveGroupRepo.manager.createQueryBuilder().getOne).toHaveBeenCalled();
      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();
    });

    it('should successfully create a switch directive', async () => {
      // Simulate that the group name does not exist in the database
      directiveGroupRepo.manager.createQueryBuilder().getOne.mockResolvedValue(null);

      // Mocking query results for group and mapping IDs
      queryRunner.manager.query.mockResolvedValueOnce([{ NEXTVAL: 1 }]); // Group ID
      queryRunner.manager.query.mockResolvedValueOnce([{ NEXTVAL: 1 }]); // Mapping ID
      queryRunner.manager.query.mockResolvedValueOnce([{ NEXTVAL: 1 }]); // Element Mapping ID

      // Mock successful insert operation
      directiveGroupRepo.manager.createQueryBuilder().execute.mockResolvedValue(null);

      const result = await service.create(mockCreateSwitchDirectiveDto);

      expect(result.message).toBe('Switch directive saved successfully');
      expect(result.status).toBe(HttpStatus.CREATED);
      expect(queryRunner.commitTransaction).toHaveBeenCalled();
    });

    it('should handle errors during the database operation', async () => {
      // Simulate that an error occurs during the insert operation
      directiveGroupRepo.manager.createQueryBuilder().getOne.mockResolvedValue(null);
      queryRunner.manager.query.mockResolvedValueOnce([{ NEXTVAL: 1 }]); // Group ID

      // Mock an error during the insert operation
      queryRunner.manager.createQueryBuilder().execute.mockRejectedValue(new Error('Database Error'));

      try {
        await service.create(mockCreateSwitchDirectiveDto);
      } catch (error) {
        expect(error.message).toBe('Database Error');
        expect(queryRunner.rollbackTransaction).toHaveBeenCalled();
      }
    });

    it('should properly handle transaction rollback in case of failure', async () => {
      // Simulate that the group name does not exist and mock successful group ID retrieval
      directiveGroupRepo.manager.createQueryBuilder().getOne.mockResolvedValue(null);
      queryRunner.manager.query.mockResolvedValueOnce([{ NEXTVAL: 1 }]);

      // Simulate failure during element insertion
      queryRunner.manager.query.mockResolvedValueOnce([{ NEXTVAL: 1 }]); // Mapping ID
      queryRunner.manager.createQueryBuilder().execute.mockRejectedValueOnce(new Error('Element Insert Error'));

      try {
        await service.create(mockCreateSwitchDirectiveDto);
      } catch (error) {
        expect(error.message).toBe('Element Insert Error');
        expect(queryRunner.rollbackTransaction).toHaveBeenCalled();
      }
    });
  });
