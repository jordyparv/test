 describe("updateSwitchDetails", () => {
    it("should update switch details successfully", async () => {
      const switchDetails = { SWITCH_UNID: 1, name: "Updated Switch" };
      const mockResult = { affectedRows: 1 };

      jest
        .spyOn(connection, "executeQuery")
        .mockResolvedValue(mockResult);

      const result = await repository.updateSwitchDetails(switchDetails);

      expect(result).toEqual(mockResult);
      expect(connection.executeQuery).toHaveBeenCalledWith(
        queries.updateTable("OPS_DATA_SWITCH", switchDetails, ["SWITCH_UNID"]),
        switchDetails
      );
    });

    it("should handle errors during update", async () => {
      const switchDetails = { SWITCH_UNID: 1, name: "Updated Switch" };
      const error = new Error("Update Error");
      jest.spyOn(connection, "executeQuery").mockRejectedValue(error);

      await expect(repository.updateSwitchDetails(switchDetails)).rejects.toThrow("Update Error");
    });
  });

  describe("getSwitchDetailForTypeAhead", () => {
    it("should return switch details for type ahead successfully", async () => {
      const obj = { key: "name", value: "Switch" };
      const mockResult = { rows: [{ id: 1, name: "Switch 1" }] };

      jest
        .spyOn(connection, "executeQuery")
        .mockResolvedValue(mockResult);

      const result = await repository.getSwitchDetailForTypeAhead(obj);

      expect(result).toEqual(mockResult.rows);
      expect(connection.executeQuery).toHaveBeenCalledWith(
        queries.getSwitchDetailForTypeAhead(obj.key),
        { FILTER_VALUE: obj.value }
      );
    });

    it("should handle errors during retrieval for type ahead", async () => {
      const obj = { key: "name", value: "Switch" };
      const error = new Error("Retrieval Error");
      jest.spyOn(connection, "executeQuery").mockRejectedValue(error);

      await expect(repository.getSwitchDetailForTypeAhead(obj)).rejects.toThrow("Retrieval Error");
    });
  });
