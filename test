import { Test, TestingModule } from '@nestjs/testing';
import { CreateSwitchService } from './create-switch.service';
import { InternalServerErrorException } from '@nestjs/common';
import { RestClient } from "../../common/util/restClient/restClient.service";
import { cacheHelper } from "../../common/cache/cache.helper";
import switchRepository from "../switch.repository";
import { Oracle } from "../../common/database/oracle";
import { CommonUtil } from "../../common/util/common.util";
import { CreateSwitchDto } from "../../common/dto/createswitch.dto";
import { Logger } from '@nestjs/common';

jest.mock("../../common/util/restClient/restClient.service");
jest.mock("../../common/cache/cache.helper");
jest.mock("../switch.repository");
jest.mock("../../common/database/oracle");
jest.mock("../../common/util/common.util");

describe('CreateSwitchService', () => {
  let service: CreateSwitchService;
  let mockSwitchRepo: switchRepository;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        CreateSwitchService,
        { provide: RestClient, useValue: {} },
        { provide: cacheHelper, useValue: {} },
        { provide: switchRepository, useValue: { insertSwitch: jest.fn(), addContacts: jest.fn() } },
        { provide: Oracle, useValue: {} },
      ],
    }).compile();

    service = module.get<CreateSwitchService>(CreateSwitchService);
    mockSwitchRepo = module.get<switchRepository>(switchRepository);
  });

  describe('createSwitch', () => {
    it('should successfully create a switch', async () => {
      const createSwitchDto: CreateSwitchDto = {
        SWITCH: 'TestSwitch',
        SWITCH_CONTACTS: [
          {
            ROLE: 'SWITCH_TECHNICIAN',
            USER_ID: '123',
            FNAME: 'John',
            LNAME: 'Doe',
          },
        ],
        CREATED_BY: 'Admin',
      };

      const mockInsertSwitchResponse = { SWITCH_UNID: '12345' };
      const mockAddContactsResponse = true;

      mockSwitchRepo.insertSwitch = jest.fn().mockResolvedValue(mockInsertSwitchResponse);
      mockSwitchRepo.addContacts = jest.fn().mockResolvedValue(mockAddContactsResponse);

      const result = await service.createSwitch(createSwitchDto);

      expect(result.resultcode).toBe(0);
      expect(result.resultmessage).toBe('Record saved successfully');
      expect(mockSwitchRepo.insertSwitch).toHaveBeenCalledTimes(1);
      expect(mockSwitchRepo.addContacts).toHaveBeenCalledTimes(1);
    });

    it('should throw InternalServerErrorException if switch creation fails', async () => {
      const createSwitchDto: CreateSwitchDto = {
        SWITCH: 'TestSwitch',
        SWITCH_CONTACTS: [],
        CREATED_BY: 'Admin',
      };

      mockSwitchRepo.insertSwitch = jest.fn().mockResolvedValue(null);

      await expect(service.createSwitch(createSwitchDto)).rejects.toThrow(InternalServerErrorException);
    });

    it('should throw InternalServerErrorException if contact creation fails', async () => {
      const createSwitchDto: CreateSwitchDto = {
        SWITCH: 'TestSwitch',
        SWITCH_CONTACTS: [
          { ROLE: 'SWITCH_MANAGER', USER_ID: '123', FNAME: 'Jane', LNAME: 'Doe' },
        ],
        CREATED_BY: 'Admin',
      };

      const mockInsertSwitchResponse = { SWITCH_UNID: '12345' };
      mockSwitchRepo.insertSwitch = jest.fn().mockResolvedValue(mockInsertSwitchResponse);
      mockSwitchRepo.addContacts = jest.fn().mockResolvedValue(false);

      await expect(service.createSwitch(createSwitchDto)).rejects.toThrow(InternalServerErrorException);
    });
  });

  describe('getSwitchContacts', () => {
    it('should return contacts when valid data is passed', async () => {
      const filterData = { role: 'SWITCH_MANAGER', name: 'John Doe' };
      const mockContacts = [
        {
          switch_unid: '12345',
          role: 'SWITCH_MANAGER',
          userid: '123',
          fname: 'John',
          lname: 'Doe',
          updated_by: 'Admin',
        },
      ];

      mockSwitchRepo.getSwitchContacts = jest.fn().mockResolvedValue(mockContacts);

      const result = await service.getSwitchContacts(filterData);

      expect(result).toEqual(mockContacts);
      expect(mockSwitchRepo.getSwitchContacts).toHaveBeenCalledTimes(1);
    });

    it('should throw an error when something goes wrong', async () => {
      const filterData = { role: 'SWITCH_MANAGER', name: 'John Doe' };

      mockSwitchRepo.getSwitchContacts = jest.fn().mockRejectedValue(new Error('Database error'));

      await expect(service.getSwitchContacts(filterData)).rejects.toThrow(InternalServerErrorException);
    });
  });

  describe('reverseSync', () => {
    it('should successfully reverse sync', async () => {
      const mockPayload = { SWITCH_UNID: '12345' };

      global.fetch = jest.fn().mockResolvedValue({
        json: jest.fn().mockResolvedValue({
          fields: {
            meta_universalid: { value: '12345' },
            locationid: { value: '123' },
          },
        }),
      });

      const result = await service.reverseSync(mockPayload);

      expect(result).toEqual({
        fields: {
          meta_universalid: { value: '12345' },
          locationid: { value: '123' },
        },
      });
    });

    it('should throw an error if reverse sync fails', async () => {
      const mockPayload = { SWITCH_UNID: '12345' };

      global.fetch = jest.fn().mockRejectedValue(new Error('Network error'));

      await expect(service.reverseSync(mockPayload)).rejects.toThrowError('Network error');
    });
  });
});
