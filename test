 async checkSwitchUnidInTable(switch_unid: string) {
    try {
      const query = queries.isSwitchUnidInTable;
      const qparams = [switch_unid];
      let data: any = await this.connection.executeQuery(query, qparams);
      return data.rows;
    } catch (error) {
      console.error(error.message);
      return null;
    }
  }

  async updateSwitchDetails(switchDetails:{[key:string]:any}){

    try {
    let tableName = 'OPS_DATA_SWITCH_TMP'
    let whereCondition = ['SWITCH_UNID']
      const query = queries.updateTable(tableName,switchDetails,whereCondition);
      const qparams = switchDetails;
      let data: any = await this.connection.executeQuery(query, qparams);
  
      return data;
    } catch (error) {
      logger.error(error.message)
      throw error
    }
  }
  async getSwitchDetailForTypeAhead(obj:filterObjType){

      try {
        const query = queries.getSwitchDetailForTypeAhead(obj.key)
        const qParams = {FILTER_VALUE:obj.value}
        let data: any = await this.connection.executeQuery(query, qParams);
        return data.rows;
      } catch (error) {
        logger.error(error.message)
        throw error
      }

  }

  async getSwitchPmControl(switchUnid:string){
    try {

      const query = queries.getSwitchPmControl
      const qParams = [switchUnid]
      const data:any = await this.connection.executeQuery(query,qParams)
      return data.rows;
    } catch (error) {
      logger.error(error.message)
      throw error
    }
  }
  async updateSwitchPmControl(qParams:SwitchPmControlType){
    try {

      const tableName = 'OPS_DATA_SWITCH'
      const whereConditionColumn = ['SWITCH_UNID']
      
      const query = queries.updateTable(tableName,qParams,whereConditionColumn)
      
      const data:any = await this.connection.executeQuery(query,qParams)
      return data;
    } catch (error) {
      logger.error(error.message)
      throw error
    }
  }
