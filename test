  async getSwitchDirective() {
    const rawData =
      await this.DirectiveGroupEntityRepository.createQueryBuilder('gr')
        .select([
          `gr.GROUP_NAME AS "group_name"`,
          `gr.META_CREATED_BY AS "created_by"`,
          `TO_CHAR(TRUNC(gr.META_CREATED_DATE), 'YYYY-MM-DD') AS "created_on"`,
          `gr.GROUP_ID AS "group_id"`,
          `ugm.MAPPING_ID AS "mapping_id"`,
          `ugm.ASSIGNED_TEAM AS "assigned_team"`,
          `sc.LASTNAME || ', ' || sc.FIRSTNAME AS "assigned_to"`,
          `sele.VENDOR AS "vendor"`,
          `sele.ELEMENT_DIVISION AS "elements_division"`,
          `sele.ELEMENT_DEPT AS "element_dept"`,
          `sele.ELEMENT_ID AS "element_id"`, // Add ELEMENT_ID so we can gather it into the elements array
        ])
        .innerJoin(
          DirectiveUserGroupMappingEntity,
          'ugm',
          'ugm.GROUP_ID = gr.GROUP_ID',
        )
        .innerJoin(
          DirectiveElementGroupMappingEntity,
          'egm',
          'egm.GROUP_ID = gr.GROUP_ID',
        )
        .innerJoin(
          SwitchElementEntity,
          'sele',
          'sele.ELEMENT_ID = egm.ELEMENT_ID',
        )
        .innerJoin(SecContactEntity, 'sc', 'sc.LOGIN_ID = ugm.USER_ID')
        .getRawMany();
 
    // Step 2: Transform the raw data into the desired structure
    const groupedData = rawData.reduce(async (acc, row) => {
      const teams = await this.SecContactEntityRepository
      .createQueryBuilder()
      .select([`select TRIM(LASTNAME) || ', ' || TRIM(FIRSTNAME) as "switchtech_name", role as "role",login_id as "login_id"`])
      .whereInIds(row?.assigned_team?.split(','))
      .getRawMany();
      const {
        element_id,
        elements_division,
        element_dept,
        group_id,
        vendor,
        ...rest
      } = row;
      // Check if the group already exists in the accumulator
      let group = acc.find((g) => g.group_id === group_id);
      if (!group) {
        group = {
          elements_division,
          vendor,
          ...rest,
          teams,
          elements: [], // Initialize the elements array
        };
        acc.push(group);
      }

      // Add the element information to the group's elements array
      group.elements.push({
        element_id,
        element_name:elements_division,
        vendor,
        sub_element_name:element_dept,
      });
      group.element_dept = `${group.elements.length} Dept`;
      return acc;
    }, []);

    return groupedData;
  }
