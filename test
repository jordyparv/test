describe('SwitchController - Additional Methods', () => {
  describe('getSwitchDetailForTypeAhead', () => {
    it('should call getSwitchDetailForTypeAhead and return the result', async () => {
      const req = mockRequest();
      const res = mockResponse();
      const mockData = { detail: 'switch detail' };

      jest.spyOn(switchService, 'getSwitchDetailForTypeAhead').mockResolvedValueOnce(mockData);

      await switchController.getSwitchDetailForTypeAhead(req, res);

      expect(switchService.getSwitchDetailForTypeAhead).toHaveBeenCalledWith(req, res);
      expect(res.json).toHaveBeenCalledWith(mockData);
    });

    it('should handle errors in getSwitchDetailForTypeAhead', async () => {
      const req = mockRequest();
      const res = mockResponse();
      const error = new Error('Service error');

      jest.spyOn(switchService, 'getSwitchDetailForTypeAhead').mockRejectedValueOnce(error);

      await switchController.getSwitchDetailForTypeAhead(req, res);

      expect(switchService.getSwitchDetailForTypeAhead).toHaveBeenCalledWith(req, res);
      expect(res.status).toHaveBeenCalledWith(500);
      expect(res.json).toHaveBeenCalledWith({
        error: 'error while getting switch details typeahead',
      });
    });
  });

  describe('editSwitchDetails', () => {
    it('should call editSwitchDetails and return success response', async () => {
      const req = mockRequest({ params: { switch_unid: '123' } });
      const res = mockResponse();

      jest.spyOn(switchService, 'editSwitchDetails').mockResolvedValueOnce(undefined);

      await switchController.editSwitchDetails(req, res);

      expect(switchService.editSwitchDetails).toHaveBeenCalledWith(req, res);
      expect(res.send).toHaveBeenCalledWith({ message: 'Switch updated successfully' }); // Assuming a success message
    });

    it('should handle errors in editSwitchDetails', async () => {
      const req = mockRequest({ params: { switch_unid: '123' } });
      const res = mockResponse();
      const error = new Error('Service error');

      jest.spyOn(switchService, 'editSwitchDetails').mockRejectedValueOnce(error);

      await switchController.editSwitchDetails(req, res);

      expect(switchService.editSwitchDetails).toHaveBeenCalledWith(req, res);
      expect(res.status).toHaveBeenCalledWith(500);
      expect(res.json).toHaveBeenCalledWith({
        error: 'error while updating switch',
      });
    });
  });
});
